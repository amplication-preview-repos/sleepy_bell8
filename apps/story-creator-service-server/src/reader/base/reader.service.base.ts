/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Reader as PrismaReader } from "@prisma/client";

export class ReaderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReaderCountArgs, "select">): Promise<number> {
    return this.prisma.reader.count(args);
  }

  async readers(args: Prisma.ReaderFindManyArgs): Promise<PrismaReader[]> {
    return this.prisma.reader.findMany(args);
  }
  async reader(
    args: Prisma.ReaderFindUniqueArgs
  ): Promise<PrismaReader | null> {
    return this.prisma.reader.findUnique(args);
  }
  async createReader(args: Prisma.ReaderCreateArgs): Promise<PrismaReader> {
    return this.prisma.reader.create(args);
  }
  async updateReader(args: Prisma.ReaderUpdateArgs): Promise<PrismaReader> {
    return this.prisma.reader.update(args);
  }
  async deleteReader(args: Prisma.ReaderDeleteArgs): Promise<PrismaReader> {
    return this.prisma.reader.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Reader } from "./Reader";
import { ReaderCountArgs } from "./ReaderCountArgs";
import { ReaderFindManyArgs } from "./ReaderFindManyArgs";
import { ReaderFindUniqueArgs } from "./ReaderFindUniqueArgs";
import { CreateReaderArgs } from "./CreateReaderArgs";
import { UpdateReaderArgs } from "./UpdateReaderArgs";
import { DeleteReaderArgs } from "./DeleteReaderArgs";
import { ReaderService } from "../reader.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Reader)
export class ReaderResolverBase {
  constructor(
    protected readonly service: ReaderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Reader",
    action: "read",
    possession: "any",
  })
  async _readersMeta(
    @graphql.Args() args: ReaderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Reader])
  @nestAccessControl.UseRoles({
    resource: "Reader",
    action: "read",
    possession: "any",
  })
  async readers(@graphql.Args() args: ReaderFindManyArgs): Promise<Reader[]> {
    return this.service.readers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Reader, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Reader",
    action: "read",
    possession: "own",
  })
  async reader(
    @graphql.Args() args: ReaderFindUniqueArgs
  ): Promise<Reader | null> {
    const result = await this.service.reader(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reader)
  @nestAccessControl.UseRoles({
    resource: "Reader",
    action: "create",
    possession: "any",
  })
  async createReader(@graphql.Args() args: CreateReaderArgs): Promise<Reader> {
    return await this.service.createReader({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reader)
  @nestAccessControl.UseRoles({
    resource: "Reader",
    action: "update",
    possession: "any",
  })
  async updateReader(
    @graphql.Args() args: UpdateReaderArgs
  ): Promise<Reader | null> {
    try {
      return await this.service.updateReader({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reader)
  @nestAccessControl.UseRoles({
    resource: "Reader",
    action: "delete",
    possession: "any",
  })
  async deleteReader(
    @graphql.Args() args: DeleteReaderArgs
  ): Promise<Reader | null> {
    try {
      return await this.service.deleteReader(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
